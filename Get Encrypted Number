#Geeks for Geeks Solution:
Time Complexity: O(N**2)
Auxiliary Space: O(N)



def digitEncrypt(numbers) :
    N = len(numbers)
     
    # If the value of N is 2
    if N == 2 :
        if numbers[0] == 0 and numbers[1] == 0 :
            return "00"
        elif numbers[0] == 0:
            return "0" + str((numbers[1]))
        return str(numbers[0])+ str(numbers[1])
     
    for i in range(0,N-1) :
        numbers[i] = (numbers[i]+ numbers[i + 1])% 10
  
    numbers.pop()
  
    return digitEncrypt(numbers)
 
# Driver code
if __name__ == "__main__":
 
    numbers = [ 4, 5, 6, 7 ]
 
    # Function call
    print(digitEncrypt(numbers))
    
                                                                    (OR)
    
    
 #Best Case Solution:
 
 
#Space COmplexity = O(1)
#Time = O(n-1)+ O(n-2) + O(n-3)+.....O(2)
#Worst Case - O(n)^2

def getEncryptednumber(numbers):
  n=len(numbers)  #T=1, S=1
  while(n!=2): #T=n
    for i in range(0,n-1):#T=n^2
      numbers[i]=(numbers[i] + numbers[i+1])%10  #T=n^2  S=n
    n=n-1
  return str(numbers[0])+str(numbers[1])
  
numbers = [4,5,6,7]
print(getEncryptednumber(numbers))
    
   
